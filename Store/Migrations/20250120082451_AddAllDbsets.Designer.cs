// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Models.Context;

#nullable disable

namespace Store.Migrations
{
    [DbContext(typeof(PlaystationStoreContext))]
    [Migration("20250120082451_AddAllDbsets")]
    partial class AddAllDbsets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Store.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Store.Models.Customer", b =>
                {
                    b.Property<string>("phoneNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("phoneNo");

                    b.HasIndex("BranchId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Store.Models.InvoiceModels.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("BranchId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Store.Models.InvoiceModels.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceItemId"));

                    b.Property<int?>("DeviceMaintenanceId")
                        .HasColumnType("int");

                    b.Property<int?>("DigitalCardtId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("InvoiceItemPrice")
                        .HasColumnType("float");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("DeviceMaintenanceId");

                    b.HasIndex("DigitalCardtId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Store.Models.ProductModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Store.Models.ProductModels.DeviceMaintenance", b =>
                {
                    b.Property<int>("DeviceMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceMaintenanceId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceSerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DeviceMaintenanceId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("StatusId");

                    b.ToTable("DeviceMaintenance");
                });

            modelBuilder.Entity("Store.Models.ProductModels.DeviceMaintenanceStatus", b =>
                {
                    b.Property<int>("DeviceMaintenanceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceMaintenanceStatusId"));

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceMaintenanceStatusId");

                    b.ToTable("DeviceMaintenanceStatus");
                });

            modelBuilder.Entity("Store.Models.ProductModels.DigitalCard", b =>
                {
                    b.Property<int>("DigitalCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DigitalCardId"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("DigitalCardId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PlatformId");

                    b.ToTable("DigitalCard");
                });

            modelBuilder.Entity("Store.Models.ProductModels.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("PlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Store.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Store.Models.User.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Store.Models.User.SystemUser", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("UserName");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("Store.Models.Customer", b =>
                {
                    b.HasOne("Store.Models.Branch", null)
                        .WithMany("Customers")
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Store.Models.InvoiceModels.Invoice", b =>
                {
                    b.HasOne("Store.Models.Branch", "Branch")
                        .WithMany("Invoices")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Store.Models.InvoiceModels.InvoiceItem", b =>
                {
                    b.HasOne("Store.Models.ProductModels.DeviceMaintenance", "DeviceMaintenance")
                        .WithMany()
                        .HasForeignKey("DeviceMaintenanceId");

                    b.HasOne("Store.Models.ProductModels.DigitalCard", "DigitalCard")
                        .WithMany()
                        .HasForeignKey("DigitalCardtId");

                    b.HasOne("Store.Models.InvoiceModels.Invoice", "Invoice")
                        .WithMany("invoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("DeviceMaintenance");

                    b.Navigation("DigitalCard");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Models.ProductModels.DeviceMaintenance", b =>
                {
                    b.HasOne("Store.Models.Branch", null)
                        .WithMany("DeviceMaintenance")
                        .HasForeignKey("BranchId");

                    b.HasOne("Store.Models.ProductModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.ProductModels.Platform", "Platform")
                        .WithMany("DeviceMaintenances")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.ProductModels.DeviceMaintenanceStatus", "DeviceStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DeviceStatus");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Store.Models.ProductModels.DigitalCard", b =>
                {
                    b.HasOne("Store.Models.Branch", null)
                        .WithMany("DigitalCards")
                        .HasForeignKey("BranchId");

                    b.HasOne("Store.Models.ProductModels.Platform", "Platform")
                        .WithMany("DigitalCards")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Store.Models.ProductModels.Product", b =>
                {
                    b.HasOne("Store.Models.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.ProductModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.ProductModels.Platform", "Platform")
                        .WithMany("Products")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Category");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Store.Models.User.SystemUser", b =>
                {
                    b.HasOne("Store.Models.Branch", "Branch")
                        .WithMany("SystemUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Models.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Store.Models.Branch", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("DeviceMaintenance");

                    b.Navigation("DigitalCards");

                    b.Navigation("Invoices");

                    b.Navigation("Products");

                    b.Navigation("SystemUsers");
                });

            modelBuilder.Entity("Store.Models.InvoiceModels.Invoice", b =>
                {
                    b.Navigation("invoiceItems");
                });

            modelBuilder.Entity("Store.Models.ProductModels.Platform", b =>
                {
                    b.Navigation("DeviceMaintenances");

                    b.Navigation("DigitalCards");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
